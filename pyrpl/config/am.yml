redpitaya:
  hostname: 10.214.1.22
  password: root
  user: root
  port: 2222
  frequency_correction: 1.0
  filename: fpga//red_pitaya.bin
  reloadfpga: true
  # autostart gui?
  gui: true
  monitor_server_name: pyrpl

general:
  # name of this device
  name: am
  # level of logged information.
  # 'debug' outputs everything
  # 'infi' is default level
  # 'warning' only shows warnings and errors
  # 'error' only shows errors
  loglevel: info
  # import CurveDB class from which module? if missing, it's pyrpl.curvedb

# most important section that defines how the lockbox understands the
# real-world system
model:
  # use class Interferometer for internal model and lock algorithms
  # upper- or lowercase spelling is accepted if there is no ambiguity
  modeltype: interferometer_am
  # only needed parameter is wavelength
  # (to convert piezo displacement into gain)
  wavelength: 1.064e-06
  # maximum tolerated error of the internal variable
  # for interferometer, this is the phase error in radians
  # this value is uniquely needed for the function 'islocked'
  lock:
    error_threshold: 11.0  # 1 degree works except for minimum_transmission!!
    stages:
      finish:
        input: transmission
        factor: 1.0
        phase: 0
        outputs:
        - eom
  unlock:
    time: 0.05
  shutter:
    settle_time: 1.0
  minimum_transmission:
    factor: 0.002
    phase: 90.0
    offset: 0
    time: 0.1

# all signals that are inputs of the lockbox. Must be signal names understood
# by the model
inputs:
  transmission:
    unit: mW
    mW_per_V: -42.81797679660428
    redpitaya_input: adc1
    offset: -0.0020903870463371277
    max: 12.710936382184956
    min: -0.06859892881326835
    mean: 6.648211793358596
    rms: 4.353099334042175
    curve: 319485
  iq:
    redpitaya_input: iq0
    setup:
      frequency: 10000.0
      phase: 150
      output_direct: out1
      output_signal: quadrature
      quadrature_factor: 1
      input: adc1
      gain: 0
      amplitude: 0.049
      acbandwidth: 2000
      bandwidth: [1000, 10000]
    max: 0.27760428190231323
    min: -0.25657540559768677
    mean: -0.0003466010093688965
    rms: 0.09610868236090389
    curve: 319487
    offset: -0.00013846158981323242
# All output signals. Names of outputs are arbitrary.
outputs:
  # we only have 1 actuator in this interferometer, the piezo in the LO arm
  eom:
    # output channel where the lopiezo is connected
    redpitaya_output: out1
    # voltage limits
    max_voltage: 0.95
    min_voltage: -0.95
    calibrationunits: phase_per_V
    phase_per_V: 1.0
    analogfilter:
      lowpass:
      - 600  # between 550 and 800 depending on how it's measured
    lock:
      unity_gain_frequency: 250.0
      inputfilter:
      - 38856.18727829476
      - 1243397.9929054324
      - 621698.9964527162
      - 621698.9964527162
    sweep:
      waveform: ramp
      frequency: 10.0
      amplitude: 0.95

##############################################################################
###  Configuration parameters that rarely need to be modified ################
##############################################################################

scope:
  input1: dac1
  input2: adc1
  duration: 0.1
  trigger_source: immediately
  average: false

scopegui:
  coordinates:
  - -1125
  - 263
  - 800
  - 600
  auto_run_continuous: true

# default properties for signal acquisition
signal:
  unit: V # can be any of m, Hz, V, raw, ... as long as unit_per_V is defined
  V_per_V: 1.0 # default unit is V
  raw_per_V: 8192.0 # raw units from the FPGA
  # minimum trace duration in seconds
  # be aware that this number affects both the sampling rate and the minimum
  # frequency that can be resolved. Usually, you want to keep duration as long
  # as you can stand to wait for new signal data, typically 10-100 ms.
  duration: 0.1
  # selects whether scope is to be used in average mode
  # false is strongly suggested for duration-independent estimation of rms
  # true is preferred only when we want to get an extremely good mean estimate
  average: false
  # if true, the signal.curve command automatically saves the data to CurveDB
  autosave: true
  # number of points per curve; also the number of points used for mean and rms
  points: 16384
  # default trigger source
  trigger_source: immediately
  trigger_delay: 0
  # timeout determines the time interval within which we do not take another
  # data trace if several parameters are requested. To always obtain fresh
  # data, set this to -1. To enable manual acquisition control with the acquire
  # function '_acquire()', set this to a very large value or to '.inf'.
  acquire_timeout: 0.3
  # if true, the offset is subtraced. Calibrate with signal.get_offset()
  offset_subtraction: true
  offset: 0
  # peak is a reserved place to store the peak value, for example offresonant
  # reflection from a cavity
  peak: 0
  threshold: 0
  hysteresis: 0.002
